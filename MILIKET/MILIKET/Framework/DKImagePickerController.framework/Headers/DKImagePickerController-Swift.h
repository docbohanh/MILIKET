// Generated by Apple Swift version 3.0.1 (swiftlang-800.0.58.6 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import AVFoundation;
@import Foundation;
@import ObjectiveC;
@import CoreGraphics;
@import Photos;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface AVAsset (SWIFT_EXTENSION(DKImagePickerController))
- (float)calculateFileSize;
@end


@interface NSBundle (SWIFT_EXTENSION(DKImagePickerController))
+ (NSBundle * _Nonnull)imagePickerControllerBundle;
@end


@interface NSBundle (SWIFT_EXTENSION(DKImagePickerController))
+ (NSBundle * _Nonnull)cameraBundle;
@end

@class PHAsset;
@class UIImage;
@class PHImageRequestOptions;
@class PHVideoRequestOptions;

/**
  An \code
  DKAsset
  \endcode object represents a photo or a video managed by the \code
  DKImagePickerController
  \endcode.
*/
SWIFT_CLASS("_TtC23DKImagePickerController7DKAsset")
@interface DKAsset : NSObject
/**
  When the asset was an image, itâ€™s false. Otherwise true.
*/
@property (nonatomic, readonly) BOOL isVideo;
@property (nonatomic, readonly, strong) PHAsset * _Nullable originalAsset;
@property (nonatomic, copy) NSString * _Null_unspecified localIdentifier;
- (nonnull instancetype)initWithOriginalAsset:(PHAsset * _Nonnull)originalAsset OBJC_DESIGNATED_INITIALIZER;
- (BOOL)isEqual:(id _Nullable)object;
- (void)fetchImageWithSize:(CGSize)size completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageWithSize:(CGSize)size options:(PHImageRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageWithSize:(CGSize)size options:(PHImageRequestOptions * _Nullable)options contentMode:(PHImageContentMode)contentMode completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchFullScreenImageWithCompleteBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
/**
  Fetch an image with the current screen size.
  \param sync If true, the method blocks the calling thread until image is ready or an error occurs.

  \param completeBlock The block is executed when the image download is complete.

*/
- (void)fetchFullScreenImage:(BOOL)sync completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchOriginalImageWithCompleteBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
/**
  Fetch an image with the original size.
  \param sync If true, the method blocks the calling thread until image is ready or an error occurs.

  \param completeBlock The block is executed when the image download is complete.

*/
- (void)fetchOriginalImage:(BOOL)sync completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
/**
  Fetch an AVAsset with a completeBlock.
*/
- (void)fetchAVAssetWithCompleteBlock:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completeBlock;
/**
  Fetch an AVAsset with a completeBlock and PHVideoRequestOptions.
*/
- (void)fetchAVAsset:(PHVideoRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completeBlock;
/**
  Sync fetch an AVAsset with a completeBlock and PHVideoRequestOptions.
*/
- (void)fetchAVAsset:(BOOL)sync options:(PHVideoRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completeBlock;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface DKAsset (SWIFT_EXTENSION(DKImagePickerController))
/**
  Writes the image in the receiver to the file specified by a given path.
*/
- (void)writeImageToFile:(NSString * _Nonnull)path completeBlock:(void (^ _Nonnull)(BOOL))completeBlock;
/**
  Writes the AV in the receiver to the file specified by a given path.
  \param presetName An NSString specifying the name of the preset template for the export. See AVAssetExportPresetXXX.

*/
- (void)writeAVToFile:(NSString * _Nonnull)path presetName:(NSString * _Nonnull)presetName completeBlock:(void (^ _Nonnull)(BOOL))completeBlock;
@end

@class PHAssetCollection;

SWIFT_CLASS("_TtC23DKImagePickerController12DKAssetGroup")
@interface DKAssetGroup : NSObject
@property (nonatomic, copy) NSString * _Null_unspecified groupId;
@property (nonatomic, copy) NSString * _Null_unspecified groupName;
@property (nonatomic, strong) PHAssetCollection * _Null_unspecified originalCollection;
@property (nonatomic, strong) PHFetchResult<PHAsset *> * _Null_unspecified fetchResult;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

SWIFT_CLASS("_TtC23DKImagePickerController22DKAssetGroupGridLayout")
@interface DKAssetGroupGridLayout : UICollectionViewFlowLayout
- (void)prepareLayout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC23DKImagePickerController13DKBaseManager")
@interface DKBaseManager : NSObject
- (void)addObserver:(id _Nonnull)object;
- (void)removeObserver:(id _Nonnull)object;
- (void)notifyObserversWithSelector:(SEL _Nonnull)selector object:(id _Nullable)object;
- (void)notifyObserversWithSelector:(SEL _Nonnull)selector object:(id _Nullable)object objectTwo:(id _Nullable)objectTwo;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIView;
@class AVCaptureSession;
@class AVCaptureVideoPreviewLayer;
@class AVCaptureDevice;
@class CMMotionManager;
@class UIButton;
@class UIPinchGestureRecognizer;
@class UITapGestureRecognizer;

SWIFT_CLASS("_TtC23DKImagePickerController8DKCamera")
@interface DKCamera : UIViewController
+ (void)checkCameraPermission:(void (^ _Nonnull)(BOOL))handler;
@property (nonatomic, copy) void (^ _Nullable didCancel)(void);
@property (nonatomic, copy) void (^ _Nullable didFinishCapturingImage)(UIImage * _Nonnull);
@property (nonatomic, strong) UIView * _Nullable cameraOverlayView;
+ (BOOL)isAvailable;
/**
  Determines whether or not the rotation is enabled.
*/
@property (nonatomic) BOOL allowsRotate;
@property (nonatomic, readonly, strong) AVCaptureSession * _Nonnull captureSession;
@property (nonatomic, strong) AVCaptureVideoPreviewLayer * _Null_unspecified previewLayer;
@property (nonatomic, strong) AVCaptureDevice * _Nullable currentDevice;
@property (nonatomic, strong) AVCaptureDevice * _Nullable captureDeviceFront;
@property (nonatomic, strong) AVCaptureDevice * _Nullable captureDeviceBack;
@property (nonatomic, strong) UIView * _Nonnull contentView;
@property (nonatomic, readonly, strong) CMMotionManager * _Nonnull motionManager;
@property (nonatomic, strong) UIButton * _Nonnull flashButton;
@property (nonatomic, strong) UIButton * _Null_unspecified cameraSwitchButton;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidLayoutSubviews;
- (void)viewDidDisappear:(BOOL)animated;
- (void)didReceiveMemoryWarning;
@property (nonatomic, readonly) BOOL prefersStatusBarHidden;
- (void)setupDevices;
- (void)setupUI;
- (void)takePicture;
- (void)handleZoom:(UIPinchGestureRecognizer * _Nonnull)gesture;
- (void)handleFocus:(UITapGestureRecognizer * _Nonnull)gesture;
- (AVCaptureFlashMode)flashModeFromUserDefaults;
- (void)updateFlashModeToUserDefautls:(AVCaptureFlashMode)flashMode;
- (void)updateFlashButton;
- (void)beginSession;
- (void)setupCurrentDevice;
- (void)updateFlashMode;
- (void)focusAtTouchPoint:(CGPoint)touchPoint;
@property (nonatomic, readonly) BOOL shouldAutorotate;
- (void)setupMotionManager;
- (void)initialOriginalOrientationForOrientation SWIFT_METHOD_FAMILY(none);
- (void)updateContentLayoutForCurrentOrientation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;

SWIFT_CLASS("_TtC23DKImagePickerController23DKCameraPassthroughView")
@interface DKCameraPassthroughView : UIView
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PHFetchOptions;
@class NSError;
@class PHChange;

SWIFT_CLASS("_TtC23DKImagePickerController18DKGroupDataManager")
@interface DKGroupDataManager : DKBaseManager <PHPhotoLibraryChangeObserver>
@property (nonatomic, copy) NSArray<NSString *> * _Nullable groupIds;
@property (nonatomic, strong) PHFetchOptions * _Nullable assetFetchOptions;
@property (nonatomic) BOOL showsEmptyAlbums;
- (void)invalidate;
- (void)fetchGroups:(SWIFT_NOESCAPE void (^ _Nonnull)(NSArray<NSString *> * _Nullable, NSError * _Nullable))completeBlock;
- (DKAssetGroup * _Nonnull)fetchGroupWithGroupId:(NSString * _Nonnull)groupId;
- (void)fetchGroupThumbnailForGroup:(NSString * _Nonnull)groupId size:(CGSize)size options:(PHImageRequestOptions * _Nonnull)options completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (DKAsset * _Nonnull)fetchAssetWithGroup:(DKAssetGroup * _Nonnull)group index:(NSInteger)index;
- (void)photoLibraryDidChange:(PHChange * _Nonnull)changeInstance;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC23DKImagePickerController14DKImageManager")
@interface DKImageManager : DKBaseManager
+ (void)checkPhotoPermission:(void (^ _Nonnull)(BOOL))handler;
@property (nonatomic) BOOL autoDownloadWhenAssetIsInCloud;
@property (nonatomic, strong) DKGroupDataManager * _Null_unspecified groupDataManager;
- (void)invalidate;
- (void)fetchImageForAsset:(DKAsset * _Nonnull)asset size:(CGSize)size completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageForAsset:(DKAsset * _Nonnull)asset size:(CGSize)size contentMode:(PHImageContentMode)contentMode completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageForAsset:(DKAsset * _Nonnull)asset size:(CGSize)size options:(PHImageRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageForAsset:(DKAsset * _Nonnull)asset size:(CGSize)size options:(PHImageRequestOptions * _Nullable)options contentMode:(PHImageContentMode)contentMode completeBlock:(void (^ _Nonnull)(UIImage * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchImageDataForAsset:(DKAsset * _Nonnull)asset options:(PHImageRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(NSData * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchAVAsset:(DKAsset * _Nonnull)asset completeBlock:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)fetchAVAsset:(DKAsset * _Nonnull)asset options:(PHVideoRequestOptions * _Nullable)options completeBlock:(void (^ _Nonnull)(AVAsset * _Nullable, NSDictionary * _Nullable))completeBlock;
- (void)startCachingAssetsFor:(NSArray<PHAsset *> * _Nonnull)assets targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(PHImageRequestOptions * _Nullable)options;
- (void)stopCachingAssetsFor:(NSArray<PHAsset *> * _Nonnull)assets targetSize:(CGSize)targetSize contentMode:(PHImageContentMode)contentMode options:(PHImageRequestOptions * _Nullable)options;
- (void)stopCachingForAllAssets;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol DKImagePickerControllerUIDelegate;
enum DKImagePickerControllerAssetType : NSInteger;
@class NSPredicate;
enum DKImagePickerControllerSourceType : NSInteger;

/**
  The \code
  DKImagePickerController
  \endcode class offers the all public APIs which will affect the UI.
*/
SWIFT_CLASS("_TtC23DKImagePickerController23DKImagePickerController")
@interface DKImagePickerController : UINavigationController
@property (nonatomic, strong) id <DKImagePickerControllerUIDelegate> _Nonnull UIDelegate;
/**
  Forces selection of tapped image immediatly.
*/
@property (nonatomic) BOOL singleSelect;
/**
  The maximum count of assets which the user will be able to select.
*/
@property (nonatomic) NSInteger maxSelectableCount;
/**
  Set the showsEmptyAlbums to specify whether or not the empty albums is shown in the picker.
*/
@property (nonatomic) BOOL showsEmptyAlbums;
/**
  The type of picker interface to be displayed by the controller.
*/
@property (nonatomic) enum DKImagePickerControllerAssetType assetType;
/**
  The predicate applies to images only.
*/
@property (nonatomic, strong) NSPredicate * _Nullable imageFetchPredicate;
/**
  The predicate applies to videos only.
*/
@property (nonatomic, strong) NSPredicate * _Nullable videoFetchPredicate;
/**
  If sourceType is Camera will cause the assetType & maxSelectableCount & allowMultipleTypes & defaultSelectedAssets to be ignored.
*/
@property (nonatomic) enum DKImagePickerControllerSourceType sourceType;
/**
  Whether allows to select photos and videos at the same time.
*/
@property (nonatomic) BOOL allowMultipleTypes;
/**
  If YES, and the requested image is not stored on the local device, the Picker downloads the image from iCloud.
*/
@property (nonatomic) BOOL autoDownloadWhenAssetIsInCloud;
/**
  Determines whether or not the rotation is enabled.
*/
@property (nonatomic) BOOL allowsLandscape;
/**
  The callback block is executed when user pressed the cancel button.
*/
@property (nonatomic, copy) void (^ _Nullable didCancel)(void);
@property (nonatomic) BOOL showsCancelButton;
/**
  The callback block is executed when user pressed the select button.
*/
@property (nonatomic, copy) void (^ _Nullable didSelectAssets)(NSArray<DKAsset *> * _Nonnull);
/**
  It will have selected the specific assets.
*/
@property (nonatomic, copy) NSArray<DKAsset *> * _Nullable defaultSelectedAssets;
@property (nonatomic, copy) NSArray<DKAsset *> * _Nonnull selectedAssets;
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)dismiss;
- (void)done;
- (void)deselectAssetAtIndex:(NSInteger)index;
- (void)deselectAsset:(DKAsset * _Nonnull)asset;
- (void)deselectAllAssets;
@property (nonatomic, readonly) BOOL shouldAutorotate;
@property (nonatomic, readonly) UIInterfaceOrientationMask supportedInterfaceOrientations;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/**
  <ul>
    <li>
      AllPhotos: Get all photos assets in the assets group.
    </li>
    <li>
      AllVideos: Get all video assets in the assets group.
    </li>
    <li>
      AllAssets: Get all assets in the group.
    </li>
  </ul>
*/
typedef SWIFT_ENUM(NSInteger, DKImagePickerControllerAssetType) {
  DKImagePickerControllerAssetTypeAllPhotos = 0,
  DKImagePickerControllerAssetTypeAllVideos = 1,
  DKImagePickerControllerAssetTypeAllAssets = 2,
};

@class UICollectionViewLayout;
@class UIColor;
@class UIFont;

SWIFT_PROTOCOL("_TtP23DKImagePickerController33DKImagePickerControllerUIDelegate_")
@protocol DKImagePickerControllerUIDelegate
/**
  The picker calls -prepareLayout once at its first layout as the first message to the UIDelegate instance.
*/
- (void)prepareLayout:(DKImagePickerController * _Nonnull)imagePickerController vc:(UIViewController * _Nonnull)vc;
/**
  Returns a custom camera.
  <em>Note</em>
  If you are using a UINavigationController as the custom camera,
  you should also set the pickerâ€™s modalPresentationStyle to .OverCurrentContext, like this:
  \code
  pickerController.modalPresentationStyle = .OverCurrentContext

  \endcode*/
- (UIViewController * _Nonnull)imagePickerControllerCreateCamera:(DKImagePickerController * _Nonnull)imagePickerController didCancel:(void (^ _Nonnull)(void))didCancel didFinishCapturingImage:(void (^ _Nonnull)(UIImage * _Nonnull))didFinishCapturingImage didFinishCapturingVideo:(void (^ _Nonnull)(NSURL * _Nonnull))didFinishCapturingVideo;
/**
  The layout is to provide information about the position and visual state of items in the collection view.
*/
- (SWIFT_METATYPE(UICollectionViewLayout) _Nonnull)layoutForImagePickerController:(DKImagePickerController * _Nonnull)imagePickerController;
/**
  Called when the user needs to show the cancel button.
*/
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController showsCancelButtonForVC:(UIViewController * _Nonnull)vc;
/**
  Called when the user needs to hide the cancel button.
*/
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController hidesCancelButtonForVC:(UIViewController * _Nonnull)vc;
/**
  Called after the user changes the selection.
*/
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didSelectAsset:(DKAsset * _Nonnull)didSelectAsset;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didSelectAssets:(NSArray<DKAsset *> * _Nonnull)didSelectAssets;
/**
  Called after the user changes the selection.
*/
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didDeselectAsset:(DKAsset * _Nonnull)didDeselectAsset;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didDeselectAssets:(NSArray<DKAsset *> * _Nonnull)didDeselectAssets;
/**
  Called when the count of the selectedAssets did reach \code
  maxSelectableCount
  \endcode.
*/
- (void)imagePickerControllerDidReachMaxLimit:(DKImagePickerController * _Nonnull)imagePickerController;
/**
  Accessory view below content. default is nil.
*/
- (UIView * _Nullable)imagePickerControllerFooterView:(DKImagePickerController * _Nonnull)imagePickerController;
/**
  The camera image to be displayed in the albumâ€™s first cell.
*/
- (UIImage * _Nonnull)imagePickerControllerCameraImage;
/**
  Set the color of the number when object is selected.
*/
- (UIColor * _Nonnull)imagePickerControllerCheckedNumberColor;
/**
  Set the font of the number when object is selected.
*/
- (UIFont * _Nonnull)imagePickerControllerCheckedNumberFont;
/**
  Set the color of the object outline when object is selected.
*/
- (UIColor * _Nullable)imagePickerControllerCheckedImageTintColor;
/**
  Set the color of the background of the collection view.
*/
- (UIColor * _Nonnull)imagePickerControllerCollectionViewBackgroundColor;
@end


SWIFT_CLASS("_TtC23DKImagePickerController40DKImagePickerControllerDefaultUIDelegate")
@interface DKImagePickerControllerDefaultUIDelegate : NSObject <DKImagePickerControllerUIDelegate>
@property (nonatomic, weak) DKImagePickerController * _Null_unspecified imagePickerController;
@property (nonatomic, strong) UIButton * _Nonnull doneButton;
- (UIButton * _Nonnull)createDoneButton;
- (void)updateDoneButtonTitle:(UIButton * _Nonnull)button;
- (void)prepareLayout:(DKImagePickerController * _Nonnull)imagePickerController vc:(UIViewController * _Nonnull)vc;
- (UIViewController * _Nonnull)imagePickerControllerCreateCamera:(DKImagePickerController * _Nonnull)imagePickerController didCancel:(void (^ _Nonnull)(void))didCancel didFinishCapturingImage:(void (^ _Nonnull)(UIImage * _Nonnull))didFinishCapturingImage didFinishCapturingVideo:(void (^ _Nonnull)(NSURL * _Nonnull))didFinishCapturingVideo;
- (SWIFT_METATYPE(UICollectionViewLayout) _Nonnull)layoutForImagePickerController:(DKImagePickerController * _Nonnull)imagePickerController;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController showsCancelButtonForVC:(UIViewController * _Nonnull)vc;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController hidesCancelButtonForVC:(UIViewController * _Nonnull)vc;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didSelectAsset:(DKAsset * _Nonnull)didSelectAsset;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didSelectAssets:(NSArray<DKAsset *> * _Nonnull)didSelectAssets;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didDeselectAsset:(DKAsset * _Nonnull)didDeselectAsset;
- (void)imagePickerController:(DKImagePickerController * _Nonnull)imagePickerController didDeselectAssets:(NSArray<DKAsset *> * _Nonnull)didDeselectAssets;
- (void)imagePickerControllerDidReachMaxLimit:(DKImagePickerController * _Nonnull)imagePickerController;
- (UIView * _Nullable)imagePickerControllerFooterView:(DKImagePickerController * _Nonnull)imagePickerController;
- (UIImage * _Nonnull)imagePickerControllerCameraImage;
- (UIColor * _Nonnull)imagePickerControllerCheckedNumberColor;
- (UIFont * _Nonnull)imagePickerControllerCheckedNumberFont;
- (UIColor * _Nullable)imagePickerControllerCheckedImageTintColor;
- (UIColor * _Nonnull)imagePickerControllerCollectionViewBackgroundColor;
- (void)checkCameraPermission:(DKCamera * _Nonnull)camera;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DKImagePickerControllerSourceType) {
  DKImagePickerControllerSourceTypeCamera = 0,
  DKImagePickerControllerSourceTypePhoto = 1,
  DKImagePickerControllerSourceTypeBoth = 2,
};



SWIFT_CLASS("_TtC23DKImagePickerController23DKPopoverViewController")
@interface DKPopoverViewController : UIViewController
+ (void)popoverViewController:(UIViewController * _Nonnull)viewController fromView:(UIView * _Nonnull)fromView;
+ (void)dismissPopoverViewController;
- (void)loadView;
- (void)viewDidLoad;
- (void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


@interface UICollectionView (SWIFT_EXTENSION(DKImagePickerController))
@end

#pragma clang diagnostic pop
